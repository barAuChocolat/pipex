/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: babonnet <babonnet@42angouleme.fr>         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/29 19:12:29 by babonnet          #+#    #+#             */
/*   Updated: 2023/12/19 18:36:14 by babonnet         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"
#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

int	exec_bash(char *cmd, char **arg)
{
	if (execve(cmd, arg, NULL) == -1)
	{
		perror("execve");
		return (1);
	}
	return (0);
}

int	create_fork(int ac, int count, char **av, int *prev_fd)
{
	int		fd[2];
	char	**arg;
	char	*cmd;
	int		pid;

	if (ac <= 1)
	{
		fprintf(stderr, "No commands provided.\n");
		return (1);
	}
	arg = ft_split(av[count], ' ');
	cmd = ft_strjoin("/usr/bin/", arg[0]);
	pid = fork();
	if (pid == 0)
	{
		pipe(fd);
		if (count > 1)
		{ 
			dup2(prev_fd[0], STDIN_FILENO);
			close(prev_fd[0]);
			close(prev_fd[1]);
		}
		if (count < ac - 1)
		{               
			close(fd[0]);
			dup2(fd[1], STDOUT_FILENO);
			close(fd[1]);
			create_fork(ac, count + 1, av, fd);
		}
		execve(cmd, arg, NULL);
		perror("execve");
		exit(EXIT_FAILURE); 
	}
	else if (pid < 0)
	{
		perror("fork");
		return (1);
	}
	waitpid(pid, NULL, 0);
	return (0);
}

int	main(int ac, char **av)
{
	printf("ac = %d\n", ac);
	int	fd[2];

	pipe(fd);
	if (create_fork(ac, 1, av, fd) == 1)
		return (1);
	return (0);
}
